name: cd-back-end-workflow
on:
  push:
    branches:
      - main
    paths:
      - 'starter/backend/**'
  workflow_dispatch:

jobs:
  cd_be_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
        working-directory: starter/backend

      - name: Run Lint code
        run: pipenv run lint
        working-directory: starter/backend

  cd_be_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
        working-directory: starter/backend

      - name: Run Test code
        run: pipenv run test
        working-directory: starter/backend

  cd_be_build:
    runs-on: ubuntu-latest
    needs: [cd_be_lint, cd_be_test]
    if: ${{ success() && needs.cd_be_lint.result == 'success' && needs.cd_be_test.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
        working-directory: starter/backend

      - name: Run Test code
        run: pipenv run test
        working-directory: starter/backend

  cd_be_deploy:
    runs-on: ubuntu-latest
    needs: [cd_be_build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
      
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_DEFAULT_REGION }}.amazonaws.com/backend
          tags: |
            type=sha 
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          context: starter/backend
          tag_with_sha: true
          tags: ${{ steps.meta.outputs.tags }}
      
      - name: Update Kubeconfig K8S cluster
        run: aws eks update-kubeconfig --name cluster --region ${{ vars.AWS_DEFAULT_REGION }}

      - name: Deploy to EKS cluster
        run: |
          kustomize edit set image backend=${{ steps.meta.outputs.tags }}
          kustomize build | kubectl apply -f -
        working-directory: starter/backend/k8s