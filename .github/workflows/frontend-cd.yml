name: cd-front-end-workflow
on: 
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:
    inputs:
      trigger-ci:
        description: 'Manually trigger CI'
        required: false
        default: 'false'
jobs:
  cd_fe_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Run Lint code
        run: |
          cd starter/frontend
          npm install
          npm run lint

  cd_fe_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Run Test code
        run: |
          cd starter/frontend
          npm install
          npm test

  cd_fe_build:
    runs-on: ubuntu-latest
    needs: [cd_fe_test, cd_fe_lint]
    if: ${{ success() && needs.cd_fe_lint.result == 'success' && needs.cd_fe_test.result == 'success' }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        # Add steps to build the frontend application using Docker
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Build application with Docker
          run: |
            cd starter/frontend
            docker build \
              --build-arg REACT_APP_MOVIE_API_URL=${{ secrets.MOVIE_API_URL }} \
              -t frontend:${{ github.sha }} .
            docker run -e REACT_APP_MOVIE_API_URL=${{ secrets.MOVIE_API_URL }} frontend:${{ github.sha }}
    
  cd_fe_ecr-login:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: ${{ secrets.AWS_REGISTRY_URL }}
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  cd_fe_ecr-push:
    runs-on: ubuntu-latest
    needs: [cd_fe_build, cd_fe_ecr-login]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Add steps to push the Docker image to ECR
      - name: Tag and Push Docker image to ECR
        run: |
          docker tag frontend:${{ github.sha }} ${{ AWS_ACCOUNT_ID }}.dkr.ecr.${{ AWS_DEFAULT_REGION }}.amazonaws.com/frontend:${{ github.sha }}
          docker push ${{ AWS_ACCOUNT_ID }}.dkr.ecr.${{ AWS_DEFAULT_REGION }}.amazonaws.com/frontend:${{ github.sha }}
  
  cd_fe_deploy:
    runs-on: ubuntu-latest
    needs: [cd_fe_ecr-push]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ AWS_DEFAULT_REGION }}

      - name: Deploy to EKS cluster
        run: |
          cd starter/frontend/k8s
          kustomize edit set image frontend=${{ AWS_ACCOUNT_ID }}.dkr.ecr.${{ AWS_DEFAULT_REGION }}.amazonaws.com/frontend:${{ github.sha }}
          kustomize build | kubectl apply -f -