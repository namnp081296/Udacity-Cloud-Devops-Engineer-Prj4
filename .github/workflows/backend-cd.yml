name: cd-back-end-workflow
on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:
    inputs:
      trigger-ci:
        description: 'Manually trigger CI'
        required: false
        default: 'false'
jobs:
  cd_be_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Python
        - uses: actions/setup-python@v5
          with:
            python-version: '3.10'
      
      - name: Install Python Dependencies
        run: |
          cd starter/backend
          pipenv install

      - name: Run Test code
        run: |
          cd starter/backend
          pipenv run test

  cd_be_build:
    runs-on: ubuntu-latest
    needs: cd_be_test
    if: ${{ success() && needs.cd_be_lint.result == 'success' && needs.cd_be_test.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build application with Docker
        run: |
          cd starter/backend
          docker build \
            --build-arg REACT_APP_MOVIE_API_URL=${{ secrets.MOVIE_API_URL }} \
            -t backend:${{ github.sha }} .
          docker run -e REACT_APP_MOVIE_API_URL=${{ secrets.MOVIE_API_URL }} backend:${{ github.sha }}
  
  cd_be_ecr-login:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: ${{ secrets.AWS_REGISTRY_URL }}
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  cd_be_ecr-push:
    runs-on: ubuntu-latest
    needs: [cd_be_build, cd_be_ecr-login]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Add steps to push the Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker tag backend:${{ github.sha }} ${{ AWS_ACCOUNT_ID }}.dkr.ecr.${{ AWS_DEFAULT_REGION }}.amazonaws.com/backend:${{ github.sha }}
          docker push ${{ AWS_ACCOUNT_ID }}.dkr.ecr.${{ AWS_DEFAULT_REGION }}.amazonaws.com/backend:${{ github.sha }}

  cd_be_deploy:
    runs-on: ubuntu-latest
    needs: [cd_be_ecr-push]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ AWS_DEFAULT_REGION }}

      - name: Deploy to EKS cluster
        run: |
          cd starter/backend/k8s
          kustomize edit set image backend=${{ AWS_ACCOUNT_ID }}.dkr.ecr.${{ AWS_DEFAULT_REGION }}.amazonaws.com/backend:${{ github.sha }}
          kustomize build | kubectl apply -f -


  # cd_be_deploy:
  #   runs-on: ubuntu-latest
  #   steps:
    
      # - name: Checkout code
      #   uses: actions/checkout@v2

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ AWS_DEFAULT_REGION }}

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   run: aws ecr get-login-password --region ${{ AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ AWS_ACCOUNT_ID }}.dkr.ecr.${{ AWS_DEFAULT_REGION }}.amazonaws.com

      # - name: Tag image with ECR repository URI
      #   run: docker tag backend:${{ IMAGE_TAG }} ${{ AWS_ACCOUNT_ID }}.dkr.ecr.${{ AWS_DEFAULT_REGION }}.amazonaws.com/backend:${{ IMAGE_TAG }}

      # - name: Push image to Amazon ECR
      #   run: docker push ${{ AWS_ACCOUNT_ID }}.dkr.ecr.${{ AWS_DEFAULT_REGION }}.amazonaws.com/backend:${{ IMAGE_TAG }}

    
